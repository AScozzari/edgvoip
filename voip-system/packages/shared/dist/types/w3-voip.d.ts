import { z } from 'zod';
export declare const VoipTrunkSchema: z.ZodObject<{
    id: z.ZodString;
    tenant_id: z.ZodString;
    store_id: z.ZodOptional<z.ZodString>;
    sip_domain: z.ZodString;
    provider: z.ZodString;
    proxy: z.ZodString;
    port: z.ZodDefault<z.ZodNumber>;
    transport: z.ZodDefault<z.ZodEnum<["udp", "tcp", "tls"]>>;
    auth_username: z.ZodString;
    secret_ref: z.ZodString;
    register: z.ZodDefault<z.ZodBoolean>;
    expiry_seconds: z.ZodDefault<z.ZodNumber>;
    codec_set: z.ZodDefault<z.ZodString>;
    status: z.ZodDefault<z.ZodEnum<["REG_OK", "FAIL", "UNKNOWN"]>>;
    note: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    sip_domain: string;
    status: "REG_OK" | "FAIL" | "UNKNOWN";
    tenant_id: string;
    provider: string;
    port: number;
    transport: "udp" | "tcp" | "tls";
    register: boolean;
    auth_username: string;
    proxy: string;
    secret_ref: string;
    expiry_seconds: number;
    codec_set: string;
    store_id?: string | undefined;
    note?: string | undefined;
}, {
    id: string;
    sip_domain: string;
    tenant_id: string;
    provider: string;
    auth_username: string;
    proxy: string;
    secret_ref: string;
    status?: "REG_OK" | "FAIL" | "UNKNOWN" | undefined;
    store_id?: string | undefined;
    port?: number | undefined;
    transport?: "udp" | "tcp" | "tls" | undefined;
    register?: boolean | undefined;
    expiry_seconds?: number | undefined;
    codec_set?: string | undefined;
    note?: string | undefined;
}>;
export type VoipTrunk = z.infer<typeof VoipTrunkSchema>;
export declare const VoipDidSchema: z.ZodObject<{
    id: z.ZodString;
    tenant_id: z.ZodString;
    store_id: z.ZodOptional<z.ZodString>;
    trunk_id: z.ZodString;
    e164: z.ZodString;
    sip_domain: z.ZodOptional<z.ZodString>;
    route_target_type: z.ZodEnum<["ext", "ivr", "queue", "ai"]>;
    route_target_ref: z.ZodString;
    label: z.ZodString;
    active: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    id: string;
    active: boolean;
    tenant_id: string;
    trunk_id: string;
    e164: string;
    route_target_type: "queue" | "ivr" | "ext" | "ai";
    route_target_ref: string;
    label: string;
    sip_domain?: string | undefined;
    store_id?: string | undefined;
}, {
    id: string;
    tenant_id: string;
    trunk_id: string;
    e164: string;
    route_target_type: "queue" | "ivr" | "ext" | "ai";
    route_target_ref: string;
    label: string;
    sip_domain?: string | undefined;
    active?: boolean | undefined;
    store_id?: string | undefined;
}>;
export type VoipDid = z.infer<typeof VoipDidSchema>;
export declare const VoipExtensionSchema: z.ZodObject<{
    id: z.ZodString;
    tenant_id: z.ZodString;
    store_id: z.ZodOptional<z.ZodString>;
    sip_domain: z.ZodString;
    ext_number: z.ZodString;
    display_name: z.ZodString;
    enabled: z.ZodDefault<z.ZodBoolean>;
    voicemail_enabled: z.ZodDefault<z.ZodBoolean>;
    forward_rules: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    class_of_service: z.ZodDefault<z.ZodEnum<["agent", "supervisor", "admin"]>>;
    note: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    sip_domain: string;
    tenant_id: string;
    enabled: boolean;
    display_name: string;
    voicemail_enabled: boolean;
    ext_number: string;
    class_of_service: "admin" | "agent" | "supervisor";
    store_id?: string | undefined;
    note?: string | undefined;
    forward_rules?: Record<string, string> | undefined;
}, {
    id: string;
    sip_domain: string;
    tenant_id: string;
    display_name: string;
    ext_number: string;
    store_id?: string | undefined;
    enabled?: boolean | undefined;
    voicemail_enabled?: boolean | undefined;
    note?: string | undefined;
    forward_rules?: Record<string, string> | undefined;
    class_of_service?: "admin" | "agent" | "supervisor" | undefined;
}>;
export type VoipExtension = z.infer<typeof VoipExtensionSchema>;
export declare const VoipRouteSchema: z.ZodObject<{
    id: z.ZodString;
    tenant_id: z.ZodString;
    name: z.ZodString;
    pattern: z.ZodString;
    strip_digits: z.ZodDefault<z.ZodNumber>;
    prepend: z.ZodOptional<z.ZodString>;
    trunk_id: z.ZodString;
    priority: z.ZodDefault<z.ZodNumber>;
    active: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    active: boolean;
    tenant_id: string;
    trunk_id: string;
    priority: number;
    pattern: string;
    strip_digits: number;
    prepend?: string | undefined;
}, {
    id: string;
    name: string;
    tenant_id: string;
    trunk_id: string;
    pattern: string;
    active?: boolean | undefined;
    priority?: number | undefined;
    strip_digits?: number | undefined;
    prepend?: string | undefined;
}>;
export type VoipRoute = z.infer<typeof VoipRouteSchema>;
export declare const ContactPolicySchema: z.ZodObject<{
    id: z.ZodString;
    tenant_id: z.ZodString;
    scope_type: z.ZodEnum<["tenant", "store", "did", "ext"]>;
    scope_ref: z.ZodString;
    rules_json: z.ZodRecord<z.ZodString, z.ZodAny>;
    active: z.ZodDefault<z.ZodBoolean>;
    label: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    active: boolean;
    tenant_id: string;
    label: string;
    scope_type: "ext" | "tenant" | "store" | "did";
    scope_ref: string;
    rules_json: Record<string, any>;
}, {
    id: string;
    tenant_id: string;
    label: string;
    scope_type: "ext" | "tenant" | "store" | "did";
    scope_ref: string;
    rules_json: Record<string, any>;
    active?: boolean | undefined;
}>;
export type ContactPolicy = z.infer<typeof ContactPolicySchema>;
export declare const VoipActivityLogSchema: z.ZodObject<{
    id: z.ZodString;
    tenant_id: z.ZodString;
    actor: z.ZodString;
    action: z.ZodEnum<["create", "update", "delete", "provision", "sync"]>;
    target_type: z.ZodEnum<["trunk", "did", "ext", "route", "policy"]>;
    target_id: z.ZodString;
    status: z.ZodEnum<["ok", "fail"]>;
    details_json: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    ts: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    status: "fail" | "ok";
    tenant_id: string;
    action: "create" | "update" | "delete" | "provision" | "sync";
    actor: string;
    target_type: "trunk" | "ext" | "did" | "route" | "policy";
    target_id: string;
    ts: string;
    details_json?: Record<string, any> | undefined;
}, {
    id: string;
    status: "fail" | "ok";
    tenant_id: string;
    action: "create" | "update" | "delete" | "provision" | "sync";
    actor: string;
    target_type: "trunk" | "ext" | "did" | "route" | "policy";
    target_id: string;
    ts: string;
    details_json?: Record<string, any> | undefined;
}>;
export type VoipActivityLog = z.infer<typeof VoipActivityLogSchema>;
export declare const VoipCdrSchema: z.ZodObject<{
    id: z.ZodString;
    tenant_id: z.ZodString;
    store_id: z.ZodOptional<z.ZodString>;
    sip_domain: z.ZodString;
    call_id: z.ZodString;
    direction: z.ZodEnum<["in", "out"]>;
    from_uri: z.ZodString;
    to_uri: z.ZodString;
    did_e164: z.ZodOptional<z.ZodString>;
    ext_number: z.ZodOptional<z.ZodString>;
    start_ts: z.ZodString;
    answer_ts: z.ZodOptional<z.ZodString>;
    end_ts: z.ZodString;
    billsec: z.ZodDefault<z.ZodNumber>;
    disposition: z.ZodEnum<["ANSWERED", "NO_ANSWER", "BUSY", "FAILED"]>;
    recording_url: z.ZodOptional<z.ZodString>;
    meta_json: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    sip_domain: string;
    tenant_id: string;
    direction: "in" | "out";
    from_uri: string;
    to_uri: string;
    call_id: string;
    start_ts: string;
    end_ts: string;
    billsec: number;
    disposition: "ANSWERED" | "NO_ANSWER" | "BUSY" | "FAILED";
    store_id?: string | undefined;
    ext_number?: string | undefined;
    did_e164?: string | undefined;
    answer_ts?: string | undefined;
    recording_url?: string | undefined;
    meta_json?: Record<string, any> | undefined;
}, {
    id: string;
    sip_domain: string;
    tenant_id: string;
    direction: "in" | "out";
    from_uri: string;
    to_uri: string;
    call_id: string;
    start_ts: string;
    end_ts: string;
    disposition: "ANSWERED" | "NO_ANSWER" | "BUSY" | "FAILED";
    store_id?: string | undefined;
    ext_number?: string | undefined;
    did_e164?: string | undefined;
    answer_ts?: string | undefined;
    billsec?: number | undefined;
    recording_url?: string | undefined;
    meta_json?: Record<string, any> | undefined;
}>;
export type VoipCdr = z.infer<typeof VoipCdrSchema>;
export declare const CreateTrunkRequestSchema: z.ZodObject<{
    provider: z.ZodString;
    proxy: z.ZodString;
    port: z.ZodDefault<z.ZodNumber>;
    transport: z.ZodDefault<z.ZodEnum<["udp", "tcp", "tls"]>>;
    auth_username: z.ZodString;
    secret_ref: z.ZodString;
    register: z.ZodDefault<z.ZodBoolean>;
    expiry_seconds: z.ZodDefault<z.ZodNumber>;
    codec_set: z.ZodDefault<z.ZodString>;
    note: z.ZodOptional<z.ZodString>;
    store_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    provider: string;
    port: number;
    transport: "udp" | "tcp" | "tls";
    register: boolean;
    auth_username: string;
    proxy: string;
    secret_ref: string;
    expiry_seconds: number;
    codec_set: string;
    store_id?: string | undefined;
    note?: string | undefined;
}, {
    provider: string;
    auth_username: string;
    proxy: string;
    secret_ref: string;
    store_id?: string | undefined;
    port?: number | undefined;
    transport?: "udp" | "tcp" | "tls" | undefined;
    register?: boolean | undefined;
    expiry_seconds?: number | undefined;
    codec_set?: string | undefined;
    note?: string | undefined;
}>;
export type CreateTrunkRequest = z.infer<typeof CreateTrunkRequestSchema>;
export declare const CreateDidRequestSchema: z.ZodObject<{
    trunk_id: z.ZodString;
    e164: z.ZodString;
    route_target_type: z.ZodEnum<["ext", "ivr", "queue", "ai"]>;
    route_target_ref: z.ZodString;
    label: z.ZodString;
    active: z.ZodDefault<z.ZodBoolean>;
    store_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    active: boolean;
    trunk_id: string;
    e164: string;
    route_target_type: "queue" | "ivr" | "ext" | "ai";
    route_target_ref: string;
    label: string;
    store_id?: string | undefined;
}, {
    trunk_id: string;
    e164: string;
    route_target_type: "queue" | "ivr" | "ext" | "ai";
    route_target_ref: string;
    label: string;
    active?: boolean | undefined;
    store_id?: string | undefined;
}>;
export type CreateDidRequest = z.infer<typeof CreateDidRequestSchema>;
export declare const CreateExtensionRequestSchema: z.ZodObject<{
    ext_number: z.ZodString;
    display_name: z.ZodString;
    enabled: z.ZodDefault<z.ZodBoolean>;
    voicemail_enabled: z.ZodDefault<z.ZodBoolean>;
    forward_rules: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    class_of_service: z.ZodDefault<z.ZodEnum<["agent", "supervisor", "admin"]>>;
    note: z.ZodOptional<z.ZodString>;
    store_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    enabled: boolean;
    display_name: string;
    voicemail_enabled: boolean;
    ext_number: string;
    class_of_service: "admin" | "agent" | "supervisor";
    store_id?: string | undefined;
    note?: string | undefined;
    forward_rules?: Record<string, string> | undefined;
}, {
    display_name: string;
    ext_number: string;
    store_id?: string | undefined;
    enabled?: boolean | undefined;
    voicemail_enabled?: boolean | undefined;
    note?: string | undefined;
    forward_rules?: Record<string, string> | undefined;
    class_of_service?: "admin" | "agent" | "supervisor" | undefined;
}>;
export type CreateExtensionRequest = z.infer<typeof CreateExtensionRequestSchema>;
export declare const CreateRouteRequestSchema: z.ZodObject<{
    name: z.ZodString;
    pattern: z.ZodString;
    strip_digits: z.ZodDefault<z.ZodNumber>;
    prepend: z.ZodOptional<z.ZodString>;
    trunk_id: z.ZodString;
    priority: z.ZodDefault<z.ZodNumber>;
    active: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    active: boolean;
    trunk_id: string;
    priority: number;
    pattern: string;
    strip_digits: number;
    prepend?: string | undefined;
}, {
    name: string;
    trunk_id: string;
    pattern: string;
    active?: boolean | undefined;
    priority?: number | undefined;
    strip_digits?: number | undefined;
    prepend?: string | undefined;
}>;
export type CreateRouteRequest = z.infer<typeof CreateRouteRequestSchema>;
export declare const CreateContactPolicyRequestSchema: z.ZodObject<{
    scope_type: z.ZodEnum<["tenant", "store", "did", "ext"]>;
    scope_ref: z.ZodString;
    rules_json: z.ZodRecord<z.ZodString, z.ZodAny>;
    label: z.ZodString;
    active: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    active: boolean;
    label: string;
    scope_type: "ext" | "tenant" | "store" | "did";
    scope_ref: string;
    rules_json: Record<string, any>;
}, {
    label: string;
    scope_type: "ext" | "tenant" | "store" | "did";
    scope_ref: string;
    rules_json: Record<string, any>;
    active?: boolean | undefined;
}>;
export type CreateContactPolicyRequest = z.infer<typeof CreateContactPolicyRequestSchema>;
//# sourceMappingURL=w3-voip.d.ts.map